server:
  http_listen_port: 3200

query_frontend:
  search:
    duration_slo: 5s
    throughput_bytes_slo: 1.073741824e+09
  trace_by_id:
    duration_slo: 5s

ingester:
  max_block_duration: 5m # cut the headblock when this much time passes. this is being set for demo purposes and should probably be left alone normally
  trace_idle_period: 1s
  lifecycler:
    ring:
      replication_factor: 1

distributor:
  receivers:
    jaeger:                  # the receives all come from the OpenTelemetry collector.  more configuration information can
        protocols:           # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
          thrift_http:       #
          grpc:              # for a production deployment you should only enable the receivers you need!
          thrift_binary:     #
          thrift_compact:    #        
    zipkin:
    otlp:
      protocols:
        http:
          endpoint: "tempo:4318"
        grpc:
          endpoint: "tempo:4317"

compactor:
  compaction:
    max_block_bytes: 100_000_000
    block_retention: 336h  # overall Tempo trace retention. set for demo purposes

metrics_generator:
  registry:
    external_labels:
      source: tempo
      cluster: docker-compose
  storage:
    path: /tmp/tempo/generator/wal
    remote_write:
      - url: http://prometheus:9090/api/v1/write
        send_exemplars: true

storage:
  trace:
    backend: local # backend configuration to use
    wal:
      path: /tmp/tempo/wal # where to store the the wal locally
    local:
      path: /tmp/tempo/blocks

overrides:
  metrics_generator_processors: [service-graphs, span-metrics, 'local-blocks'] # enables metrics generator  
  